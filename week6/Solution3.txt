// https://www.hackerrank.com/challenges/find-the-running-median/problem

import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    static void add(PriorityQueue<Integer> min,PriorityQueue<Integer> max,int i) {
        if (max.isEmpty() || i < max.peek()) {
            max.add(i);
        } else {
            min.add(i);
        }
        PriorityQueue<Integer> bigHeap = max.size() > min.size() ? max : min;
        PriorityQueue<Integer> smallHeap = max.size() <= min.size() ? max : min;
        if (bigHeap.size() - smallHeap.size() > 1) {
            smallHeap.add(bigHeap.poll());
        }
        if (smallHeap.size() == bigHeap.size()) {
            double res = (((double) smallHeap.peek()) + bigHeap.peek()) / 2;
            System.out.println(res);
        } else {
            System.out.println((double) bigHeap.peek());
        }
     }

    public static void main(String[] args) throws IOException {
        try(Scanner scanner = new Scanner(System.in)){
            int aCount = scanner.nextInt();
            PriorityQueue<Integer> min = new PriorityQueue<>();
            PriorityQueue<Integer> max = new PriorityQueue<>((o1,o2)->o2.compareTo(o1));
            for (int aItr = 0; aItr < aCount; aItr++) {
                int aItem = scanner.nextInt();
                add(min,max,aItem);
            }
        }

    }
}
